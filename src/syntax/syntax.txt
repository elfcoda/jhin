# LALR(DRAFT):  
# lexer need to implement '\n' first(or not)
# RE_VALUE: TypeName(Int String), ClassName(Animal)  
# solution: union multi-newline
# DEFINE EPSILON
# NOTE_DEFINE cannot include '|' and note recursion, in NOTE_STAR(, DeclN), "," and "DeclN" should separated by blank
# DEFINE NOTE_STAR *
# DEFINE NOTE_PLUS +
# DEFINE NOTE_QUES ?

# NewLineStar ::= '\n' NewLineStar
#             |   EPSILON
# NewLinePlus ::= '\n' NewLinePlus
#             |   '\n'

----------
# program  
Prog'   ::= Prog  
----------
Prog    ::= NOTE_STAR(Prog_u)
----------
Prog_u  ::= Class | Proc
 
----------
# elif may account for the complexity of code logic, so I remove the syntax. elif can be replaced by "recursive if-else" or "case of" syntax, return NoType?
Cmd     ::= CmdN  
        |   CmdC
        |   CmdU

----------
# normal
CmdN    ::= RE_ID <- Exp
       
----------
# curly if(while)-exp can recurse, by other if(while)-exp  
CmdC    ::= while ( Exp ) { Formals }  
        |   if ( Exp ) { Formals }  
        |   if ( Exp ) { Formals } else { Formals }
        
----------
# uncurly. donot followed by if-exp and while-exp. in this case, recursive if-exp may lead to ambigious semantics, cannot recurse with other if(while)-exp  
CmdU    ::= while ( Exp ) FormalU  
        |   if ( Exp ) FormalU else FormalU   
        |   if ( Exp ) FormalU  
  
----------
# Formal  
Formals ::= NOTE_STAR(Formal)
----------
Formal  ::= Cmd|Exp|DeclN
----------
FormalU ::= CmdN|Exp|DeclN  
  
  
----------
# Decl  
Decl    ::= DeclN  
        |   Class  
  
----------
# DeclN  
DeclN   ::= RE_ID : Type
        |   RE_ID : Type <- Exp
        |   Proc  


----------
# class  
Class   ::= class RE_VALUE { NOTE_STAR(Decl) }  
        |   class RE_VALUE inherits RE_VALUE { NOTE_STAR(Decl) }

----------
# procedure  
# multi-newline to one
# Proc    ::= RE_ID ( NOTE_QUES(Proc_ar) ) NOTE_QUES(: Type) { NOTE_QUES('\n') Proc_b0 NOTE_STAR(Proc_b1)  NOTE_QUES('\n') }
#         |   RE_ID ( NOTE_QUES(Proc_ar) ) NOTE_QUES(: Type) { NOTE_QUES('\n') }  
Proc    ::= RE_ID ( NOTE_QUES(Proc_ar) ) NOTE_QUES(: Type) { Proc_b0 NOTE_STAR(Proc_b1) }
        |   RE_ID ( NOTE_QUES(Proc_ar) ) NOTE_QUES(: Type) { }  
----------
Proc_ar ::= RE_ID : Type NOTE_STAR(, RE_ID : Type)
----------
Proc_b0 ::= Exp | Cmd | DeclN
----------
# Proc_b1 ::= '\n' Exp
#         |   '\n' Cmd
#         |   '\n' DeclN
Proc_b1 ::= Exp
        |   Cmd
        |   DeclN


----------
# Types  
Type    ::= ExpT | RE_ID | TYPE  
  
----------
  
# Exp, separate Exp by several sub-Exps, can be joint by '|', return value of multi-exp is the return value of the last exp  
Exp     ::= ExpV  
        |   ExpO  
        |   ExpB  
        |   ExpT  
        |   case Exp of { NOTE_STAR(RE_ID : Type => Exp) otherwise => Exp }  
        |   return Exp  
        |   let DeclN NOTE_STAR(, DeclN) in Exp  
        |   RE_ID ( NOTE_QUES(Exp_ar) )

        |   RE_ID . RE_ID ( NOTE_QUES(Exp_ar) )
        |   RE_ID @ RE_VALUE . RE_ID ( NOTE_QUES(Exp_ar) )
        |   ( Exp ) . RE_ID ( NOTE_QUES(Exp_ar) )
        |   ( Exp ) @ RE_VALUE . RE_ID ( NOTE_QUES(Exp_ar) )

        |   lambda -> Exp
        |   lambda DeclN NOTE_STAR(, DeclN) -> Exp  

----------
Exp_ar  ::= Exp NOTE_STAR(, Exp)
----------
  
# id can be a type, eg. m: TYPE = Int, or a value  
# Value exp  
# Not Equal need implementing first  !!!
ExpV    ::= ExpV == ExpV1
        |   ExpV < ExpV1
        |   ExpV <= ExpV1  
        |   ExpV > ExpV1  
        |   ExpV >= ExpV1  
#        |   ExpV != ExpV1  # "!=" should define in lex phase firstly!!!
        |   ExpV1

----------
ExpV1   ::= ExpV1 + ExpV2  
        |   ExpV1 - ExpV2
        |   ExpV2

----------
ExpV2   ::= ExpV2 * ExpV3  
        |   ExpV2 / ExpV3
        |   ExpV3

----------
ExpV3   ::= ExpVN
        |   ! ExpVN
        |   isVoid ExpVN
        |   new RE_VALUE  

----------
ExpVN   ::= RE_INT  
        |   RE_DECIMAL  
        |   RE_STRING  
        |   RE_ID
        |   ( ExpV )  

  
             
----------
# Object exp  
ExpO    ::= THIS  
        |   ( ExpO )
        |   RE_ID
  
----------
# Bool exp  
ExpB    ::= TRUE  
        |   FALSE  
        |   ! ExpB  
        |   ( ExpB )
        |   RE_ID
  
----------
# Type exp  
ExpT    ::= ExpT + ExpT1
        |   ExpT1

----------
ExpT1   ::= ExpT1 * ExpT2
        |   ExpT2
----------

ExpT2   ::= RE_VALUE    # Type is a kind of value(ClassName)  
        |   OBJECT      # supertype of any type  
        |   BOOL  
        |   INT  
        |   FLOAT  
        |   DOUBLE  
        |   LONG  
        |   STRING  
        |   UNIT  
        |   RE_ID
        |   ( ExpT )


